precompile(Tuple{Base.Cartesian.var"#@ncall", LineNumberNode, Module, Int64, Any, Vararg{Any, N} where N})
precompile(Tuple{Base.Cartesian.var"#@nexprs", LineNumberNode, Module, Int64, Expr})
precompile(Tuple{Base.Cartesian.var"#@nloops", LineNumberNode, Module, Any, Any, Any, Vararg{Any, N} where N})
precompile(Tuple{Base.Docs.var"#@html_str", LineNumberNode, Module, Any})
precompile(Tuple{Base.Sys.var"#d#1"{String}, Float64, String})
precompile(Tuple{Base.Sys.var"#d#1"{String}, Float64})
precompile(Tuple{Base.var"##chop#342", Int64, Int64, typeof(Base.chop), String})
precompile(Tuple{Base.var"##printstyled#746", Bool, Symbol, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"##s91#155", Any, Any, Any, Any, Any})
precompile(Tuple{Base.var"##sprint#355", Base.PipeEndpoint, Int64, typeof(Base.sprint), Function, Float64})
precompile(Tuple{Base.var"##sprint#355", Base.PipeEndpoint, Int64, typeof(Base.sprint), Function, String, Vararg{Any, N} where N})
precompile(Tuple{Base.var"##sprint#355", Nothing, Int64, typeof(Base.sprint), Function, Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}}, Vararg{Any, N} where N})
precompile(Tuple{Base.var"##sprint#355", Nothing, Int64, typeof(Base.sprint), Function, Tuple{String, String, String, String}, Vararg{Any, N} where N})
precompile(Tuple{Base.var"##sprint#355", Nothing, Int64, typeof(Base.sprint), Function, Tuple{String, String, String}, Vararg{Any, N} where N})
precompile(Tuple{Base.var"##sprint#355", Nothing, Int64, typeof(Base.sprint), Function, Tuple{String, String}, Vararg{Any, N} where N})
precompile(Tuple{Base.var"##with_output_color#745", Bool, typeof(Base.with_output_color), Function, Symbol, Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char})
precompile(Tuple{Base.var"##with_output_color#745", Bool, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"##with_output_color#745", Bool, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Char})
precompile(Tuple{Base.var"#printstyled##kw", NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.printstyled), Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{Base.var"#sort!##kw", NamedTuple{(:by,), Tuple{Pkg.Operations.var"#134#140"}}, typeof(Base.sort!), Array{Tuple{Base.UUID, Nothing, Pkg.Types.PackageSpec}, 1}})
precompile(Tuple{Base.var"#sprint##kw", NamedTuple{(:context,), Tuple{Base.PipeEndpoint}}, typeof(Base.sprint), Function, String})
precompile(Tuple{Base.var"#with_output_color##kw", NamedTuple{(:bold,), Tuple{Bool}}, typeof(Base.with_output_color), Function, Symbol, Base.PipeEndpoint, String, Vararg{String, N} where N})
precompile(Tuple{ChainRulesCore.var"#64#65", Base.PkgId})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:libc, :compiler_abi), Tuple{Nothing, Pkg.BinaryPlatforms.CompilerABI}}, Type{Pkg.BinaryPlatforms.FreeBSD}, Symbol})
precompile(Tuple{Core.var"#Type##kw", NamedTuple{(:parent,), Tuple{Plots.GridLayout}}, Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend})
precompile(Tuple{Distributed.var"#133#134"})
precompile(Tuple{InteractiveUtils.var"#versioninfo##kw", NamedTuple{(:verbose,), Tuple{Bool}}, typeof(InteractiveUtils.versioninfo), Base.PipeEndpoint})
precompile(Tuple{JLD2.var"##jldopen#10", Type{T} where T, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(JLD2.jldopen), String, String})
precompile(Tuple{JLD2.var"##jldopen#32", Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(JLD2.jldopen), Main.var"#7#8", String})
precompile(Tuple{JLD2.var"##s259#30", Any, Any, Any, Any, Any, Any, Any})
precompile(Tuple{JLD2.var"##s96#21", Any, Any, Any, Any})
precompile(Tuple{JLD2.var"#@load", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{Main.var"#11#15", DataFrames.DataFrame})
precompile(Tuple{Main.var"#13#17", DataFrames.DataFrame})
precompile(Tuple{Main.var"#19#21"{String, Symbol}, DataFrames.DataFrame})
precompile(Tuple{Main.var"#20#22"{String, Symbol}, DataFrames.DataFrame})
precompile(Tuple{Main.var"#@bind", LineNumberNode, Module, Any, Any})
precompile(Tuple{Markdown.var"#@md_str", LineNumberNode, Module, Any, Vararg{Any, N} where N})
precompile(Tuple{Pkg.API.var"##status#173", Bool, Pkg.Types.PackageMode, Base.PipeEndpoint, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, typeof(Pkg.API.status), Pkg.Types.Context, Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{Pkg.API.var"#status##kw", NamedTuple{(:mode,), Tuple{Pkg.Types.PackageMode}}, typeof(Pkg.API.status), Array{Pkg.Types.PackageSpec, 1}})
precompile(Tuple{Pkg.Artifacts.var"##ensure_artifact_installed#42", Pkg.BinaryPlatforms.Platform, Bool, Bool, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{Pkg.Artifacts.var"##query_override#7", Base.Dict{Symbol, Base.Dict{K, V} where V where K}, typeof(Pkg.Artifacts.query_override), Base.SHA1})
precompile(Tuple{Pkg.Artifacts.var"#artifact_meta##kw", NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.artifact_meta), String, Base.Dict{String, Any}, String})
precompile(Tuple{Pkg.Artifacts.var"#ensure_artifact_installed##kw", NamedTuple{(:platform,), Tuple{Pkg.BinaryPlatforms.MacOS}}, typeof(Pkg.Artifacts.ensure_artifact_installed), String, Base.Dict{String, Any}, String})
precompile(Tuple{Pkg.Artifacts.var"#nover#17", String})
precompile(Tuple{Pkg.Operations.var"##check_artifacts_downloaded#53", Pkg.BinaryPlatforms.MacOS, typeof(Pkg.Operations.check_artifacts_downloaded), String})
precompile(Tuple{Pkg.Operations.var"#129#135", Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String})
precompile(Tuple{Pkg.Operations.var"#print_status##kw", NamedTuple{(:manifest, :diff), Tuple{Bool, Bool}}, typeof(Pkg.Operations.print_status), Pkg.Types.Context, Nothing, Symbol, Array{Union{Nothing, Base.UUID}, 1}, Array{Union{Nothing, String}, 1}})
precompile(Tuple{Pkg.TOML.var"##_print#9", Int64, Bool, Bool, Function, typeof(Pkg.TOML._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Array{Base.Dict{String, Dates.DateTime}, 1}}, Array{String, 1}})
precompile(Tuple{Pkg.TOML.var"##_print#9", Int64, Bool, Bool, Function, typeof(Pkg.TOML._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Dates.DateTime}, Array{String, 1}})
precompile(Tuple{Pkg.TOML.var"#_print##kw", NamedTuple{(:indent, :sorted, :by), Tuple{Int64, Bool, typeof(Base.identity)}}, typeof(Pkg.TOML._print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dict{String, Dates.DateTime}, Array{String, 1}})
precompile(Tuple{Pkg.Types.var"##Context#43", Pkg.Types.EnvCache, Base.PipeEndpoint, Bool, Bool, Int64, Bool, Bool, Nothing, Type{Pkg.Types.Context}})
precompile(Tuple{Pkg.Types.var"#45#47"{String}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{Plots.var"##GridLayout#142", Plots.RootLayout, Array{Float64, 1}, Array{Float64, 1}, Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Plots.var"##boxplot#397", Any, typeof(Plots.boxplot), Any, Vararg{Any, N} where N})
precompile(Tuple{Plots.var"##plot#130", Any, typeof(RecipesBase.plot), Plots.Plot{T} where T<:RecipesBase.AbstractBackend, Plots.Plot{T} where T<:RecipesBase.AbstractBackend, Vararg{Plots.Plot{T} where T<:RecipesBase.AbstractBackend, N} where N})
precompile(Tuple{Plots.var"##plot#130", Any, typeof(RecipesBase.plot), Plots.Plot{T} where T<:RecipesBase.AbstractBackend, Plots.Plot{T} where T<:RecipesBase.AbstractBackend})
precompile(Tuple{Plots.var"##scatter#345", Any, typeof(Plots.scatter), Any, Vararg{Any, N} where N})
precompile(Tuple{Plots.var"#attr!##kw", NamedTuple{(:guide,), Tuple{String}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Plots.var"#attr!##kw", NamedTuple{(:lims,), Tuple{Tuple{Int64, Int64}}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Plots.var"#attr!##kw", NamedTuple{(:ticks, :guide), Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Plots.var"#attr!##kw", NamedTuple{(:ticks, :guide, :guidefontsize), Tuple{Base.StepRange{Int64, Int64}, String, Int64}}, typeof(Plots.attr!), Plots.Axis})
precompile(Tuple{Plots.var"#boxplot##kw", Any, typeof(Plots.boxplot), Any, Vararg{Any, N} where N})
precompile(Tuple{PlutoUI.var"#47#50"{Base.PipeEndpoint}})
precompile(Tuple{PlutoUI.var"#48#51"{Base.PipeEndpoint}})
precompile(Tuple{PlutoUI.var"#49#52"{Base.Iterators.Pairs{Union{}, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Main.var"#5#6", Tuple{}}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:layout, :ylim, :size), Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:legend, :title, :xaxis, :yaxis, :xticks, :titlefontsize, :xguidefontsize, :markersize, :seriestype), Tuple{Nothing, String, String, String, Base.StepRange{Int64, Int64}, Int64, Int64, Int64, Symbol}}, typeof(RecipesBase.plot), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:legend, :title, :xaxis, :yaxis, :xticks, :titlefontsize, :xguidefontsize, :markersize, :seriestype), Tuple{Nothing, String, String, String, Base.StepRange{Int64, Int64}, Int64, Int64, Int64, Symbol}}, typeof(RecipesBase.plot), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:size, :layout), Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}, typeof(RecipesBase.plot), Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Vararg{Plots.Plot{Plots.GRBackend}, N} where N})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend, :color, :seriestype), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing, Symbol, Symbol}}, typeof(RecipesBase.plot), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend, :seriestype), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing, Symbol}}, typeof(RecipesBase.plot), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{RecipesBase.var"#plot##kw", NamedTuple{(:title, :line, :group, :marker, :xticks, :xaxis, :yaxis, :size), Tuple{String, Int64, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}, Symbol, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Tuple{Int64, Int64}}}, typeof(RecipesBase.plot), Array{Int64, 1}, Array{Float64, 1}})
precompile(Tuple{RecipesPipeline.var"##_extract_group_attributes#51", Function, typeof(RecipesPipeline._extract_group_attributes), Array{Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}}, 1}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{RecipesPipeline.var"#_extract_group_attributes##kw", NamedTuple{(:legend_entry,), Tuple{typeof(RecipesPipeline.legend_entry_from_tuple)}}, typeof(RecipesPipeline._extract_group_attributes), Array{Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}}, 1}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{StaticArrays.var"##s37#12", Any, Any, Any, Any})
precompile(Tuple{StaticArrays.var"##s37#2", Any, Any, Any, Any, Any})
precompile(Tuple{StaticArrays.var"##s37#6", Any, Any, Any, Any, Any, Type{T} where T, Type{T} where T, Type{T} where T, Any})
precompile(Tuple{StatsPlots.var"##add_label#17", Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:title, :line, :group, :marker, :xticks, :xaxis, :yaxis, :size), Tuple{String, Int64, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}, Symbol, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Tuple{Int64, Int64}}}}, typeof(StatsPlots.add_label), Array{String, 1}, Function, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{StatsPlots.var"##add_label#17", Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend, :color), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing, Symbol}}}, typeof(StatsPlots.add_label), Array{String, 1}, Function, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{StatsPlots.var"##add_label#17", Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing}}}, typeof(StatsPlots.add_label), Array{String, 1}, Function, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{StatsPlots.var"#11#12"{Symbol}, Expr})
precompile(Tuple{StatsPlots.var"#11#12"{Symbol}, QuoteNode})
precompile(Tuple{StatsPlots.var"#8#10"{Symbol, Array{Any, 1}, Array{Symbol, 1}}, Expr})
precompile(Tuple{StatsPlots.var"#8#10"{Symbol, Array{Any, 1}, Array{Symbol, 1}}, Float64})
precompile(Tuple{StatsPlots.var"#8#10"{Symbol, Array{Any, 1}, Array{Symbol, 1}}, Int64})
precompile(Tuple{StatsPlots.var"#8#10"{Symbol, Array{Any, 1}, Array{Symbol, 1}}, QuoteNode})
precompile(Tuple{StatsPlots.var"#8#10"{Symbol, Array{Any, 1}, Array{Symbol, 1}}, String})
precompile(Tuple{StatsPlots.var"#8#10"{Symbol, Array{Any, 1}, Array{Symbol, 1}}, Symbol})
precompile(Tuple{StatsPlots.var"#@df", LineNumberNode, Module, Any, Any})
precompile(Tuple{StatsPlots.var"#add_label##kw", NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing}}, typeof(StatsPlots.add_label), Array{String, 1}, Function, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{StatsPlots.var"#add_label##kw", NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend, :color), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing, Symbol}}, typeof(StatsPlots.add_label), Array{String, 1}, Function, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{StatsPlots.var"#add_label##kw", NamedTuple{(:title, :line, :group, :marker, :xticks, :xaxis, :yaxis, :size), Tuple{String, Int64, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}, Symbol, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Tuple{Int64, Int64}}}, typeof(StatsPlots.add_label), Array{String, 1}, Function, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{Tables.var"##s27#20", Any, Any, Any, Any, Any})
precompile(Tuple{Type{Array{RecipesBase.AbstractLayout, 2}}, UndefInitializer, Int64, Int64})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Plots.label_to_string), Tuple{Base.RefValue{Symbol}, Int64}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, DataFrames.var"#89#90"{Main.var"#12#16"}, Tuple{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Axes, F, Args} where Args<:Tuple where F where Axes}, DataFrames.var"#89#90"{Main.var"#14#18"}, Tuple{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{Array{Int64, 1}, Array{Float64, 1}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{DataType, Array{Int64, 1}, Array{Float64, 1}, Nothing}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{DataType, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Nothing}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{DataType, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Nothing}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{RecipesPipeline.GroupBy, Array{Int64, 1}, Array{Float64, 1}}}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Tuple{Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Tuple{DataType, Array{Int64, 1}, Array{Float64, 1}, Nothing}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Tuple{DataType, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Nothing}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Tuple{DataType, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Nothing}}})
precompile(Tuple{Type{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Axes, F, Args} where Args<:Tuple where F where Axes}, typeof(typeof), Tuple{Tuple{RecipesPipeline.GroupBy, Array{Int64, 1}, Array{Float64, 1}}}})
precompile(Tuple{Type{Base.CoreLogging.LogState}, Logging.ConsoleLogger})
precompile(Tuple{Type{Base.Dict{K, V} where V where K}, Base.Dict{Symbol, Int64}})
precompile(Tuple{Type{Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}}, Base.Generator{Array{Base.Dict{String, Any}, 1}, Pkg.Artifacts.var"#21#22"{String, String}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:layout, :legend, :size), Tuple{Tuple{Int64, Int64}, Symbol, Tuple{Int64, Int64}}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol, Symbol, Symbol}, NamedTuple{(:layout, :ylim, :size), Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Iterators.Pairs{Symbol, Tuple{Int64, Int64}, Tuple{Symbol, Symbol}, NamedTuple{(:size, :layout), Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}}}})
precompile(Tuple{Type{Base.Dict{Symbol, Any}}, Base.Pair{Symbol, Symbol}, Vararg{Base.Pair{A, B} where B where A, N} where N})
precompile(Tuple{Type{Base.Docs.HTML{T} where T}, String})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, JLD2.var"#33#34", Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Main.var"#9#10", Base.Iterators.Enumerate{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StatsPlots.var"#22#23"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nTasks, :readTotal), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Array{Float64, 1}}}}, Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StatsPlots.var"#22#23"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nTasks, :readTotal), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Array{Float64, 1}}}}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, StatsPlots.var"#22#23"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nTasks, :nNodes, :jobType), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Tables.var"#21#23"{Tuple{Symbol, Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, Tables.var"#21#23"{Tuple{Symbol, Symbol}, DataType}, Base.UnitRange{Int64}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(Base.esc), Array{Symbol, 1}})
precompile(Tuple{Type{Base.Generator{I, F} where F where I}, typeof(RecipesPipeline.legend_entry_from_tuple), Array{Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}}, 1}})
precompile(Tuple{Type{Base.LinearIndices{N, R} where R<:Tuple{Vararg{Base.AbstractUnitRange{Int64}, N}} where N}, Array{Symbol, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Pkg.BinaryPlatforms.FreeBSD, Base.Dict{String, Any}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{Float64, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Array{String, 1}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Float64})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Nothing})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}})
precompile(Tuple{Type{Base.Pair{A, B} where B where A}, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{Type{Base.VersionNumber}, UInt32, UInt32, UInt32, Tuple{}, Tuple{UInt64}})
precompile(Tuple{Type{Float64}, Float64})
precompile(Tuple{Type{Logging.ConsoleLogger}, Base.PipeEndpoint, Base.CoreLogging.LogLevel})
precompile(Tuple{Type{Logging.ConsoleLogger}, Base.PipeEndpoint})
precompile(Tuple{Type{Markdown.Header{2}}, Array{Any, 1}})
precompile(Tuple{Type{Markdown.Italic}, Array{Any, 1}})
precompile(Tuple{Type{Markdown.List}, Array{Any, 1}, Int64, Bool})
precompile(Tuple{Type{Measures.Length{:pct, Float64}}, Float64})
precompile(Tuple{Type{NamedTuple{(:context,), T} where T<:Tuple}, Tuple{Base.PipeEndpoint}})
precompile(Tuple{Type{NamedTuple{(:guide,), T} where T<:Tuple}, Tuple{String}})
precompile(Tuple{Type{NamedTuple{(:layout, :ylim, :size), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{Type{NamedTuple{(:lims,), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}}})
precompile(Tuple{Type{NamedTuple{(:mode,), T} where T<:Tuple}, Tuple{Pkg.Types.PackageMode}})
precompile(Tuple{Type{NamedTuple{(:nTasks, :nNodes, :jobType), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}})
precompile(Tuple{Type{NamedTuple{(:nTasks, :readTotal), T} where T<:Tuple}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Array{Float64, 1}}})
precompile(Tuple{Type{NamedTuple{(:size, :layout), T} where T<:Tuple}, Tuple{Tuple{Int64, Int64}, Tuple{Int64, Int64}}})
precompile(Tuple{Type{NamedTuple{(:ticks, :guide), T} where T<:Tuple}, Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String}})
precompile(Tuple{Type{NamedTuple{(:ticks, :guide, :guidefontsize), T} where T<:Tuple}, Tuple{Base.StepRange{Int64, Int64}, String, Int64}})
precompile(Tuple{Type{NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend), T} where T<:Tuple}, Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing}})
precompile(Tuple{Type{NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend, :color), T} where T<:Tuple}, Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing, Symbol}})
precompile(Tuple{Type{NamedTuple{(:title, :line, :group, :marker, :xticks, :xaxis, :yaxis, :size), T} where T<:Tuple}, Tuple{String, Int64, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}, Symbol, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Tuple{Int64, Int64}}})
precompile(Tuple{Type{PlotUtils.ColorPalette}, ColorSchemes.ColorScheme{Array{ColorTypes.RGB{Float64}, 1}, String, String}})
precompile(Tuple{Type{Plots.GridLayout}, Int64, Vararg{Int64, N} where N})
precompile(Tuple{Type{Plots.Plot{T} where T<:RecipesBase.AbstractBackend}, Plots.GRBackend, Int64, RecipesPipeline.DefaultsDict, Array{Plots.Series, 1}, Nothing, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.EmptyLayout, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Bool})
precompile(Tuple{Type{PlutoUI.Select}, Array{Base.Pair{String, String}, 1}})
precompile(Tuple{Type{PlutoUI.WithTerminalOutput}, String, String, Nothing})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{RecipesPipeline.GroupBy, Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{Type{RecipesBase.RecipeData}, Base.Dict{Symbol, Any}, Tuple{}})
precompile(Tuple{Type{RecipesBase.RecipeData}, RecipesPipeline.DefaultsDict, Tuple{}})
precompile(Tuple{Type{RecipesPipeline.GroupBy}, Array{String, 1}, Array{Array{Int64, 1}, 1}})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Int64})
precompile(Tuple{Type{StaticArrays.Size{S} where S}, Type{Tuple{0}}})
precompile(Tuple{Type{TableOperations.Select{DataFrames.DataFrame, true, (:nTasks, :nNodes, :jobType)}}, DataFrames.DataFrame})
precompile(Tuple{Type{TableOperations.Select{DataFrames.DataFrame, true, (:nTasks, :readTotal)}}, DataFrames.DataFrame})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Tuple{Symbol, Symbol, Symbol}, Type{Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}}}})
precompile(Tuple{Type{Tables.Schema{names, types} where types where names}, Tuple{Symbol, Symbol}, Type{Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, Float64}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#21#23"{Tuple{Symbol, Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Base.UnitRange{Int64}, Tables.var"#21#23"{Tuple{Symbol, Symbol}, DataType}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, StatsPlots.var"#22#23"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nTasks, :nNodes, :jobType), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}}}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol}, StatsPlots.var"#22#23"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nTasks, :readTotal), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Array{Float64, 1}}}}}})
precompile(Tuple{Type{Tuple}, Base.Generator{Tuple{Symbol, Symbol, Symbol}, StatsPlots.var"#22#23"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nTasks, :readTotal), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Array{Float64, 1}}}}}})
precompile(Tuple{typeof(Arpack_jll.__init__)})
precompile(Tuple{typeof(Base.:(!=)), Base.Dict{Any, Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.:(!=)), Bool, Bool})
precompile(Tuple{typeof(Base.:(!=)), JLD2.CompoundDatatype, JLD2.CompoundDatatype})
precompile(Tuple{typeof(Base.:(!=)), JLD2.RelOffset, JLD2.RelOffset})
precompile(Tuple{typeof(Base.:(!=)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(*)), Float64, Float64})
precompile(Tuple{typeof(Base.:(*)), Int64})
precompile(Tuple{typeof(Base.:(/)), UInt64, Int64})
precompile(Tuple{typeof(Base.:(<=)), Int64, Int32})
precompile(Tuple{typeof(Base.:(==)), Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.StepRange{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Base.TTY, Base.TTY})
precompile(Tuple{typeof(Base.:(==)), Bool, Symbol})
precompile(Tuple{typeof(Base.:(==)), CategoricalArrays.CategoricalValue{String, UInt32}, String})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.:(==)), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Int64, Symbol})
precompile(Tuple{typeof(Base.:(==)), JLD2.VariableLengthDatatype{JLD2.BasicDatatype}, JLD2.VariableLengthDatatype{JLD2.BasicDatatype}})
precompile(Tuple{typeof(Base.:(==)), JLD2.VariableLengthDatatype{JLD2.FixedPointDatatype}, JLD2.VariableLengthDatatype{JLD2.FixedPointDatatype}})
precompile(Tuple{typeof(Base.:(==)), PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Base.:(==)), Plots.Axis, Symbol})
precompile(Tuple{typeof(Base.:(==)), Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Base.UnitRange{Int64}, Array{String, 1}}, Symbol})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64, Int64}, Tuple{Int64, Int64, Int64}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64, Int64}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.:(==)), Tuple{Int64}, Tuple{Int64}})
precompile(Tuple{typeof(Base.:(>)), Float64, Float64})
precompile(Tuple{typeof(Base.Broadcast._broadcast_getindex_evalf), typeof(typeof), Type{T} where T})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{Array{Int64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{DataType, Array{Int64, 1}, Array{Float64, 1}, Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{DataType, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{DataType, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Nothing}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{RecipesPipeline.GroupBy, Array{Int64, 1}, Array{Float64, 1}}}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{DataType, Array{Int64, 1}, Array{Float64, 1}, Nothing}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{DataType, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Nothing}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{DataType, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Nothing}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Base.Broadcast.Style{Tuple}, Function, Tuple{RecipesPipeline.GroupBy, Array{Int64, 1}, Array{Float64, 1}}})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, String, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), Function, Symbol, Int64})
precompile(Tuple{typeof(Base.Broadcast.broadcasted), typeof(CategoricalArrays.levelcode), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{Array{Int64, 1}, Array{Float64, 1}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{DataType, Array{Int64, 1}, Array{Float64, 1}, Nothing}}}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{DataType, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Nothing}}}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{DataType, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Nothing}}}}}})
precompile(Tuple{typeof(Base.Broadcast.instantiate), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{RecipesPipeline.GroupBy, Array{Int64, 1}, Array{Float64, 1}}}}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.label_to_string), Tuple{Base.RefValue{String}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{0}, Nothing, typeof(Plots.label_to_string), Tuple{Base.RefValue{Symbol}, Int64}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, CategoricalArrays.var"#73#75", Tuple{Array{UInt32, 1}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, DataFrames.var"#89#90"{Main.var"#12#16"}, Tuple{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}}}})
precompile(Tuple{typeof(Base.Broadcast.materialize), Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1}, Nothing, DataFrames.var"#89#90"{Main.var"#14#18"}, Tuple{DataFrames.DataFrameRows{DataFrames.DataFrame, DataFrames.Index}}}})
precompile(Tuple{typeof(Base.Cartesian._nloops), Int64, Symbol, Expr, Expr})
precompile(Tuple{typeof(Base.Cartesian.inlineanonymous), Expr, Int64})
precompile(Tuple{typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64})
precompile(Tuple{typeof(Base.CoreLogging.with_logger), Function, Logging.ConsoleLogger})
precompile(Tuple{typeof(Base.CoreLogging.with_logstate), Function, Any})
precompile(Tuple{typeof(Base.Experimental.register_error_hint), Function, Type{T} where T})
precompile(Tuple{typeof(Base.Filesystem.temp_cleanup_purge)})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{Float64, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Array{String, 1}})
precompile(Tuple{typeof(Base.Iterators.enumerate), DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}})
precompile(Tuple{typeof(Base.Iterators.enumerate), Tuple{Plots.Plot{Plots.GRBackend}}})
precompile(Tuple{typeof(Base.Ryu.writeshortest), Array{UInt8, 1}, Int64, Float64, Bool, Bool, Bool, Int64, UInt8, Bool, UInt8, Bool, Bool})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.GMP.BigInt, 1}, Base.GMP.BigInt})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Base.MPFR.BigFloat, 1}, Base.MPFR.BigFloat})
precompile(Tuple{typeof(Base.Threads.resize_nthreads!), Array{Random.MersenneTwister, 1}, Random.MersenneTwister})
precompile(Tuple{typeof(Base._all), StaticArrays.var"#7#8", Core.SimpleVector, Base.Colon})
precompile(Tuple{typeof(Base._array_for), Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Base.HasLength})
precompile(Tuple{typeof(Base._array_for), Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}, Tuple{Symbol, Symbol, Symbol, Symbol}, Base.HasLength})
precompile(Tuple{typeof(Base._array_for), Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}, Tuple{Symbol, Symbol, Symbol}, Base.HasLength})
precompile(Tuple{typeof(Base._array_for), Type{DataType}, DataFrames.DataFrameColumns{DataFrames.DataFrame}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._array_for), Type{Symbol}, Array{Symbol, 1}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._atexit)})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Base.Set{Symbol}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Base.StepRange{Int64, Int64}, String, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, String, String, String, Base.StepRange{Int64, Int64}, Int64, Int64, Int64, Symbol}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Nothing, String, String, String, Base.StepRange{Int64, Int64}, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing, Symbol, Symbol}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing, Symbol}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{String, Int64, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}, Symbol, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Bool}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Int64, Int64, Int64, Int64}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Symbol, Measures.Length{:pct, Float64}, Measures.Length{:pct, Float64}}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String}}})
precompile(Tuple{typeof(Base._compute_eltype), Type{Tuple{Tuple{Int64, Int64}, Symbol, Tuple{Int64, Int64}}}})
precompile(Tuple{typeof(Base._similar_for), Array{Any, 1}, Type{Markdown.Image}, Base.Generator{Array{Any, 1}, typeof(Markdown.toexpr)}, Base.HasShape{1}})
precompile(Tuple{typeof(Base._similar_for), Base.UnitRange{Int64}, Type{Symbol}, Base.KeySet{Symbol, RecipesPipeline.DefaultsDict}, Base.HasLength})
precompile(Tuple{typeof(Base._unsafe_copyto!), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64, Array{Plots.Subplot{Plots.GRBackend}, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.all), Function, Core.SimpleVector})
precompile(Tuple{typeof(Base.allocatedinline), Type{AbstractArray{T, 1} where T}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Array{Int64, 1}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.OneTo{Int64}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Pair{String, String}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Base.Pair{var"#s16", var"#s15"} where var"#s15" where var"#s16"<:AbstractString}})
precompile(Tuple{typeof(Base.allocatedinline), Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{CodecZlib.ZStream}})
precompile(Tuple{typeof(Base.allocatedinline), Type{JLD2.RelOffset}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Markdown.Image}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Module}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{Plots.GRBackend}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Ptr{Base.Sys.UV_cpu_info_t}}})
precompile(Tuple{typeof(Base.allocatedinline), Type{RecipesBase.RecipeData}})
precompile(Tuple{typeof(Base.allocatedinline), Type{Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}}}})
precompile(Tuple{typeof(Base.atreplinit), Function})
precompile(Tuple{typeof(Base.close), JLD2.JLDFile{JLD2.MmapIO}})
precompile(Tuple{typeof(Base.collect), Array{Float64, 1}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Any, 1}, typeof(Pkg.TOML.table2dict)}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, JLD2.var"#33#34"}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Array{Symbol, 1}, typeof(Base.esc)}})
precompile(Tuple{typeof(Base.collect), Base.Generator{Base.Iterators.Enumerate{DataFrames.GroupKeys{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}}, Main.var"#9#10"}})
precompile(Tuple{typeof(Base.collect), Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame}, typeof(Base.eltype)}})
precompile(Tuple{typeof(Base.collect), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.collect), Tuple{Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.collect), Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.collect), Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(Base.collect), Tuple{Symbol}})
precompile(Tuple{typeof(Base.collect_similar), Array{Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}}, 1}, Base.Generator{Array{Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}}, 1}, typeof(RecipesPipeline.legend_entry_from_tuple)}})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol}, StatsPlots.var"#22#23"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nTasks, :readTotal), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Array{Float64, 1}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{AbstractArray{T, 1} where T, 1}, Base.Generator{Tuple{Symbol, Symbol, Symbol}, StatsPlots.var"#22#23"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nTasks, :readTotal), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Array{Float64, 1}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, StatsPlots.var"#22#23"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nTasks, :nNodes, :jobType), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to!), Array{Any, 1}, Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol}, StatsPlots.var"#22#23"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nTasks, :readTotal), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Array{Float64, 1}}}}}, Int64, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Base.Generator{Tuple{Symbol, Symbol, Symbol, Symbol}, StatsPlots.var"#22#23"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nTasks, :readTotal), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Array{Float64, 1}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Base.Generator{Tuple{Symbol, Symbol, Symbol}, StatsPlots.var"#22#23"{Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:nTasks, :readTotal), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Array{Float64, 1}}}}}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{DataType, 1}, Type{T} where T, Base.Generator{DataFrames.DataFrameColumns{DataFrames.DataFrame}, typeof(Base.eltype)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Any, 1}, typeof(Markdown.toexpr)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Expr, 1}, Expr, Base.Generator{Array{Array{Any, 1}, 1}, typeof(Markdown.toexpr)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Float64, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Float64, 1}, Float64, Base.Generator{Array{Int64, 1}, typeof(Base.float)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Markdown.Code, 1}, Markdown.Code, Base.Generator{Array{Any, 1}, typeof(Markdown.toexpr)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Markdown.Image, 1}, Markdown.Image, Base.Generator{Array{Any, 1}, typeof(Markdown.toexpr)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{String, 1}, String, Base.Generator{Array{Any, 1}, typeof(Markdown.toexpr)}, Int64})
precompile(Tuple{typeof(Base.collect_to_with_first!), Array{Tuple{Base.UUID, Nothing, Pkg.Types.PackageSpec}, 1}, Tuple{Base.UUID, Nothing, Pkg.Types.PackageSpec}, Base.Generator{Array{Pkg.Types.PackageSpec, 1}, Pkg.Operations.var"#118#124"}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Any, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Base.Dict{String, Any}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Float64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Array{String, 1}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.CoreLogging.LogState})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Base.StepRange{Int64, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Bool})
precompile(Tuple{typeof(Base.convert), Type{Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Float64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Int64})
precompile(Tuple{typeof(Base.convert), Type{Any}, Pkg.TOML.Table})
precompile(Tuple{typeof(Base.convert), Type{Any}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.convert), Type{Any}, String})
precompile(Tuple{typeof(Base.convert), Type{Any}, Symbol})
precompile(Tuple{typeof(Base.convert), Type{Any}, Tuple{Base.UnitRange{Int64}, Array{String, 1}}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.convert), Type{Any}, Type{T} where T})
precompile(Tuple{typeof(Base.convert), Type{Array{AbstractArray{T, 1} where T, 1}}, Array{AbstractArray{T, 1} where T, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{CategoricalArrays.CategoricalValue{String, UInt32}, 1}}, Array{CategoricalArrays.CategoricalValue{String, UInt32}, 1}})
precompile(Tuple{typeof(Base.convert), Type{Array{Int64, 1}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.convert), Type{Base.BitArray{1}}, Base.BitArray{1}})
precompile(Tuple{typeof(Base.convert), Type{Base.Dict{String, String}}, Base.Dict{String, Any}})
precompile(Tuple{typeof(Base.convert), Type{ColorTypes.RGBA{Float64}}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.convert), Type{JLD2.Group{T} where T}, JLD2.Group{JLD2.JLDFile{JLD2.MmapIO}}})
precompile(Tuple{typeof(Base.convert), Type{JLD2.RelOffset}, JLD2.RelOffset})
precompile(Tuple{typeof(Base.convert), Type{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.convert), Type{Union{Nothing, Array{Int64, 1}}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{Array{Int64, 1}, Array{Float64, 1}}}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}}}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}}}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{DataType, Array{Int64, 1}, Array{Float64, 1}, Nothing}}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{DataType, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Nothing}}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{DataType, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Nothing}}}}}})
precompile(Tuple{typeof(Base.copy), Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(Base.string), Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.Style{Tuple}, Nothing, typeof(typeof), Tuple{Tuple{RecipesPipeline.GroupBy, Array{Int64, 1}, Array{Float64, 1}}}}}}})
precompile(Tuple{typeof(Base.copy), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.copy), RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Base.copyto!), Array{Symbol, 1}, Base.KeySet{Symbol, RecipesPipeline.DefaultsDict}})
precompile(Tuple{typeof(Base.deepcopy_internal), Any, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Base.Dict{String, Any}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.deepcopy_internal), Tuple{UInt64}, Base.IdDict{Any, Any}})
precompile(Tuple{typeof(Base.delete!), RecipesPipeline.DefaultsDict, Symbol})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.diff_names), Tuple{Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.empty), Array{Any, 1}, Type{String}})
precompile(Tuple{typeof(Base.filter!), Base.var"#64#65"{typeof(Base.isempty)}, Array{String, 1}})
precompile(Tuple{typeof(Base.filter), Function, DataFrames.DataFrame})
precompile(Tuple{typeof(Base.filter), StatsPlots.var"#71#72"{Float64}, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.foreach), Arpack_jll.var"#7#9", Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), Arpack_jll.var"#8#10", Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), Function, Array{Base.Dict{Symbol, Any}, 1}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.foreach), OpenBLAS_jll.var"#7#9", Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.foreach), OpenBLAS_jll.var"#8#10", Tuple{Array{String, 1}}})
precompile(Tuple{typeof(Base.get!), RecipesPipeline.DefaultsDict, Symbol, Bool})
precompile(Tuple{typeof(Base.get!), RecipesPipeline.DefaultsDict, Symbol, Float64})
precompile(Tuple{typeof(Base.get!), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Base.get!), Type{Array{Function, 1}}, Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.get), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Nothing})
precompile(Tuple{typeof(Base.get), Base.Dict{Symbol, Any}, Symbol, Symbol})
precompile(Tuple{typeof(Base.get), PlutoUI.Select})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Array{Any, 1}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Array{Float64, 1}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Array{String, 1}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Base.Dict{Any, Any}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Bool})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Float64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Int64})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Measures.Length{:mm, Float64}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Nothing})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, PlotUtils.ColorPalette})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, String})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}})
precompile(Tuple{typeof(Base.get), RecipesPipeline.DefaultsDict, Symbol, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.getindex), Array{Array{Float64, 1}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{ColorTypes.RGB{Float64}, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), Array{JLD2.RelOffset, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Array{Nothing, 1}, Int64})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.getindex), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.getindex), DataFrames.GroupedDataFrame{DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.getindex), JLD2.Group{JLD2.JLDFile{JLD2.MmapIO}}, String})
precompile(Tuple{typeof(Base.getindex), OrderedCollections.OrderedDict{JLD2.RelOffset, JLD2.CommittedDatatype}, JLD2.RelOffset})
precompile(Tuple{typeof(Base.getindex), OrderedCollections.OrderedDict{String, JLD2.RelOffset}, String})
precompile(Tuple{typeof(Base.getindex), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Base.getindex), RecipesPipeline.DefaultsDict, Symbol})
precompile(Tuple{typeof(Base.getindex), Tuple, Base.UnitRange{Int64}})
precompile(Tuple{typeof(Base.getindex), Type{Expr}})
precompile(Tuple{typeof(Base.getproperty), JLD2.Group{JLD2.JLDFile{JLD2.MmapIO}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), JLD2.JLDFile{JLD2.MmapIO}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Logging.ConsoleLogger, Symbol})
precompile(Tuple{typeof(Base.getproperty), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:jobType, :nNodes, :nTasks, :rank, :nRows, :inMain, :beforeOpen, :openedFile, :openedDataSet, :determineRanges, :readEnergyDataSet, :readTimeDataSet, :readCaloDataSet, :calibrated, :filledHistograms, :gatheredAllHistograms, :gatheredRankLogs, :readTotal, :totalTime), Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, Int64, Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}, Symbol})
precompile(Tuple{typeof(Base.getproperty), Tables.Schema{(:jobType, :nNodes, :nTasks, :readEnergyDataSet_median, :readTimeDataSet_median, :readCaloDataSet_median, :readTotal_median, :filledHistograms_median, :readEnergyDataSet_maximum, :readTimeDataSet_maximum, :readCaloDataSet_maximum, :readTotal_maximum, :filledHistograms_maximum, :nProcs, :ideal_filledHistograms_median), Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, CategoricalArrays.CategoricalValue{String, UInt32}, Float64}}, Symbol})
precompile(Tuple{typeof(Base.grow_to!), Array{String, 1}, Base.Generator{Base.Iterators.Filter{typeof(StatsPlots.not_kw), Array{Any, 1}}, StatsPlots.var"#11#12"{Symbol}}, Int64})
precompile(Tuple{typeof(Base.hashindex), Symbol, Int64})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Int64}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.Dict{Symbol, Symbol}, Symbol})
precompile(Tuple{typeof(Base.haskey), Base.IdDict{Any, Any}, JLD2.CommittedDatatype})
precompile(Tuple{typeof(Base.haskey), OrderedCollections.OrderedDict{String, JLD2.RelOffset}, String})
precompile(Tuple{typeof(Base.ht_keyindex), Base.Dict{Base.PkgId, Array{Function, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.in), Nothing, Tuple{Bool, Nothing, Symbol}})
precompile(Tuple{typeof(Base.in), Plots.Subplot{Plots.GRBackend}, Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}})
precompile(Tuple{typeof(Base.in), Symbol, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 1}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Any}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Base.Pair{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Base.PipeEndpoint, Bool}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataFrames.DataFrame, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, DataFrames.DataFrame}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{DataFrames.DataFrame, DataFrames.GroupedDataFrame{DataFrames.DataFrame}, DataFrames.DataFrame}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), Tuple{Plots.GridLayout, Int64}, Int64})
precompile(Tuple{typeof(Base.isabstracttype), Any})
precompile(Tuple{typeof(Base.isassigned), Core.SimpleVector, Int64})
precompile(Tuple{typeof(Base.isempty), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.isempty), Array{JLD2.RelOffset, 1}})
precompile(Tuple{typeof(Base.isempty), Array{Tuple{Base.UUID, Nothing, Pkg.Types.PackageSpec}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Float64, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Module, 1}})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.UUID, Nothing, Pkg.Types.PackageSpec}, 1}, Int64})
precompile(Tuple{typeof(Base.iterate), Array{Tuple{Base.UUID, Nothing, Pkg.Types.PackageSpec}, 1}})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, StatsPlots.var"#8#10"{Symbol, Array{Any, 1}, Array{Symbol, 1}}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Generator{Array{Any, 1}, StatsPlots.var"#8#10"{Symbol, Array{Any, 1}, Array{Symbol, 1}}}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Float64, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{Float64, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Array{String, 1}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}, Plots.Plot{Plots.GRBackend}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Plots.Plot{Plots.GRBackend}}}, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Base.iterate), Base.Iterators.Enumerate{Tuple{Plots.Plot{Plots.GRBackend}}}, Tuple{Int64}})
precompile(Tuple{typeof(Base.iterate), Base.KeySet{Symbol, Base.Dict{Symbol, Any}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.Set{Symbol}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{OrderedCollections.OrderedDict{String, JLD2.RelOffset}}, Int64})
precompile(Tuple{typeof(Base.iterate), Base.ValueIterator{OrderedCollections.OrderedDict{String, JLD2.RelOffset}}})
precompile(Tuple{typeof(Base.join), Array{String, 1}, Char})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}}, Char})
precompile(Tuple{typeof(Base.join), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{String, String, String, String}, String})
precompile(Tuple{typeof(Base.join), Tuple{String, String, String, String}, String})
precompile(Tuple{typeof(Base.join), Tuple{String, String, String}, String})
precompile(Tuple{typeof(Base.join), Tuple{String, String}, String})
precompile(Tuple{typeof(Base.keys), DataFrames.GroupedDataFrame{DataFrames.DataFrame}})
precompile(Tuple{typeof(Base.keys), JLD2.JLDFile{JLD2.MmapIO}})
precompile(Tuple{typeof(Base.lastindex), Array{ColorTypes.RGB{Float64}, 1}})
precompile(Tuple{typeof(Base.length), Array{Array{Float64, 1}, 1}})
precompile(Tuple{typeof(Base.length), Array{Float64, 1}})
precompile(Tuple{typeof(Base.length), Array{Nothing, 1}})
precompile(Tuple{typeof(Base.length), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}})
precompile(Tuple{typeof(Base.length), OrderedCollections.OrderedDict{JLD2.RelOffset, JLD2.CommittedDatatype}})
precompile(Tuple{typeof(Base.max), Float64, Float64})
precompile(Tuple{typeof(Base.max), Int64, Int64})
precompile(Tuple{typeof(Base.merge), Base.Dict{Symbol, Any}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:legend, :title, :xaxis, :yaxis, :xticks, :titlefontsize, :xguidefontsize, :markersize), Tuple{Nothing, String, String, String, Base.StepRange{Int64, Int64}, Int64, Int64, Int64}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend, :color), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing, Symbol}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(), Tuple{}}, Base.Iterators.Pairs{Symbol, Any, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing}}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:legend, :title, :xaxis, :yaxis, :xticks, :titlefontsize, :xguidefontsize, :markersize), Tuple{Nothing, String, String, String, Base.StepRange{Int64, Int64}, Int64, Int64, Int64}}, NamedTuple{(:seriestype,), Tuple{Symbol}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing}}, NamedTuple{(:seriestype,), Tuple{Symbol}}})
precompile(Tuple{typeof(Base.merge), NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend, :color), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing, Symbol}}, NamedTuple{(:seriestype,), Tuple{Symbol}}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_names), Tuple{Symbol}, Tuple{Symbol}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:legend, :title, :xaxis, :yaxis, :xticks, :titlefontsize, :xguidefontsize, :markersize), Tuple{Nothing, String, String, String, Base.StepRange{Int64, Int64}, Int64, Int64, Int64}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend, :color), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing, Symbol}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}, Type{NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing}}}, Type{NamedTuple{(:seriestype,), Tuple{Symbol}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:categorical,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:categorical,), Tuple{Nothing}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:io,), Tuple{Base.PipeEndpoint}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.merge_types), Tuple{Symbol}, Type{NamedTuple{(:reset,), Tuple{Bool}}}, Type{NamedTuple{(), Tuple{}}}})
precompile(Tuple{typeof(Base.methods), Any, Any, Union{Nothing, Module, AbstractArray{Module, N} where N}})
precompile(Tuple{typeof(Base.methods), Any})
precompile(Tuple{typeof(Base.minimum), Tuple{Int64}})
precompile(Tuple{typeof(Base.mod1), Int64, Int64})
precompile(Tuple{typeof(Base.nameof), DataType})
precompile(Tuple{typeof(Base.nameof), UnionAll})
precompile(Tuple{typeof(Base.ntuple), StaticArrays.var"#3#4", Base.Val{1}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing}}})
precompile(Tuple{typeof(Base.pairs), NamedTuple{(:title, :fillalpha, :xticks, :xaxis, :yaxis, :legend, :color), Tuple{String, Float64, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, String, String, Nothing, Symbol}}})
precompile(Tuple{typeof(Base.pop!), Base.Dict{Symbol, Any}, Symbol, Nothing})
precompile(Tuple{typeof(Base.popfirst!), Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(Base.prepend!), Array{RecipesBase.RecipeData, 1}, Array{RecipesBase.RecipeData, 1}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.VersionNumber})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, CategoricalArrays.CategoricalValue{String, UInt32}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Base.SubString{String}})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Base.VersionNumber})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Char})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, Int64})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, Base.SubString{String}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, Base.VersionNumber, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, Int64, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.print), Base.PipeEndpoint, String, String, Vararg{String, N} where N})
precompile(Tuple{typeof(Base.print_to_string), CategoricalArrays.CategoricalValue{String, UInt32}, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.println), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.promote_eltype), Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Base.push!), Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(Base.push!), Array{Float64, 1}, Float64})
precompile(Tuple{typeof(Base.push!), Array{Function, 1}, Function})
precompile(Tuple{typeof(Base.push!), Plots.Segments{Float64}, Float64, Float64, Float64, Float64, Vararg{Float64, N} where N})
precompile(Tuple{typeof(Base.rand)})
precompile(Tuple{typeof(Base.randn)})
precompile(Tuple{typeof(Base.rawhandle), Base.PipeEndpoint})
precompile(Tuple{typeof(Base.read), JLD2.MmapIO, Type{JLD2.Superblock}})
precompile(Tuple{typeof(Base.redirect_stderr), Base.TTY})
precompile(Tuple{typeof(Base.redirect_stdout), Base.TTY})
precompile(Tuple{typeof(Base.require), Module, Symbol})
precompile(Tuple{typeof(Base.resize!), Array{JLD2.H5Datatype, 1}, Int64})
precompile(Tuple{typeof(Base.seek), JLD2.MmapIO, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{AbstractArray{T, 1} where T, 1}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JLD2.H5Datatype, 1}, JLD2.BasicDatatype, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JLD2.H5Datatype, 1}, JLD2.CompoundDatatype, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{JLD2.H5Datatype, 1}, JLD2.VariableLengthDatatype{JLD2.FixedPointDatatype}, Int64})
precompile(Tuple{typeof(Base.setindex!), Array{Plots.Plot{T} where T<:RecipesBase.AbstractBackend, 1}, Plots.Plot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Any, Plots.Subplot{T} where T<:RecipesBase.AbstractBackend}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{JLD2.RelOffset, JLD2.Group{T} where T}, JLD2.Group{JLD2.JLDFile{JLD2.MmapIO}}, JLD2.RelOffset})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Pkg.BinaryPlatforms.Platform, Base.Dict{String, Any}}, Base.Dict{String, Any}, Pkg.BinaryPlatforms.FreeBSD})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, Any}, Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Array{Int64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Base.StepRange{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Extrema, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, Any}, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Base.Dict{Symbol, PlotThemes.PlotTheme}, PlotThemes.PlotTheme, Symbol})
precompile(Tuple{typeof(Base.setindex!), OrderedCollections.OrderedDict{JLD2.RelOffset, JLD2.CommittedDatatype}, JLD2.CommittedDatatype, JLD2.RelOffset})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), Plots.Plot{Plots.GRBackend}, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Any, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{Float64, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Array{String, 1}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Any, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Base.StepRange{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Bool, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGBA{Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Float64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Int64, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Measures.Length{:mm, Float64}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Nothing, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, PlotUtils.ColorPalette, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Plots.Subplot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, String, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Symbol, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}, Symbol})
precompile(Tuple{typeof(Base.setindex!), RecipesPipeline.DefaultsDict, Tuple{Int64, Int64}, Symbol})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{Markdown.Image, 1}, String, Int64})
precompile(Tuple{typeof(Base.setindex_widen_up_to), Array{String, 1}, Markdown.LaTeX, Int64})
precompile(Tuple{typeof(Base.setproperty!), Plots.CurrentBackend, Symbol, Plots.GRBackend})
precompile(Tuple{typeof(Base.setproperty!), Plots.Plot{Plots.GRBackend}, Symbol, Nothing})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Bool})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Float64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Type})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Float64})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, String, Float64})
precompile(Tuple{typeof(Base.show_call), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Symbol, Array{Any, 1}, Int64, Int64, Bool})
precompile(Tuple{typeof(Base.show_unquoted), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, QuoteNode, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.show_unquoted_quote_expr), Base.GenericIOBuffer{Array{UInt8, 1}}, Any, Int64, Int64, Int64})
precompile(Tuple{typeof(Base.something), Nothing, Base.PipeEndpoint})
precompile(Tuple{typeof(Base.sort), Array{Float64, 1}})
precompile(Tuple{typeof(Base.string), CategoricalArrays.CategoricalValue{String, UInt32}, String, Vararg{Any, N} where N})
precompile(Tuple{typeof(Base.string), String, Float64})
precompile(Tuple{typeof(Base.task_done_hook), Task})
precompile(Tuple{typeof(Base.typename), DataType})
precompile(Tuple{typeof(Base.typename), UnionAll})
precompile(Tuple{typeof(Base.union!), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Base.union), Array{Int64, 1}, Array{Int64, 1}, Array{Int64, 1}, Vararg{Array{Int64, 1}, N} where N})
precompile(Tuple{typeof(Base.unique!), Array{Module, 1}})
precompile(Tuple{typeof(Base.unique), Array{Float64, 1}})
precompile(Tuple{typeof(Base.uv_alloc_buf), Ptr{Nothing}, UInt64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.uv_readcb), Ptr{Nothing}, Int64, Ptr{Nothing}})
precompile(Tuple{typeof(Base.values), OrderedCollections.OrderedDict{String, JLD2.RelOffset}})
precompile(Tuple{typeof(Base.vcat), Array{Any, 1}, Array{Any, 1}})
precompile(Tuple{typeof(Base.vcat), Array{Module, 1}, Array{Module, 1}, Array{Module, 1}})
precompile(Tuple{typeof(Base.vect), Module})
precompile(Tuple{typeof(Base.view), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Base.view), Array{Int64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(Bzip2_jll.__init__)})
precompile(Tuple{typeof(ChainRulesCore.__init__)})
precompile(Tuple{typeof(ChainRulesCore._primal_sig), typeof(ChainRulesCore.frule), DataType})
precompile(Tuple{typeof(ChainRulesCore._primal_sig), typeof(ChainRulesCore.rrule), DataType})
precompile(Tuple{typeof(ChainRulesCore._trigger_new_rule_hooks), Function, Type{T} where T})
precompile(Tuple{typeof(ChainRulesCore.refresh_rules), Function})
precompile(Tuple{typeof(ColorTypes.__init__)})
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{ColorTypes.RGBA{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(ColorTypes._eltypes_supported), Type{ColorTypes.RGB{T} where T<:Union{AbstractFloat, FixedPointNumbers.FixedPoint{T, f} where f where T<:Integer}}})
precompile(Tuple{typeof(ColorTypes._parameter_upper_bound), UnionAll, Int64})
precompile(Tuple{typeof(ColorTypes.basetype), Any})
precompile(Tuple{typeof(CompilerSupportLibraries_jll.__init__)})
precompile(Tuple{typeof(Core.Compiler.:(==)), TypeVar, TypeVar})
precompile(Tuple{typeof(Core.Compiler.vect), Int64})
precompile(Tuple{typeof(DocStringExtensions.__init__)})
precompile(Tuple{typeof(EarCut_jll.__init__)})
precompile(Tuple{typeof(FFMPEG_jll.__init__)})
precompile(Tuple{typeof(FFTW.__init__)})
precompile(Tuple{typeof(FFTW.spawnloop), Ptr{Nothing}, Ptr{Nothing}, UInt64, Int32, Ptr{Nothing}})
precompile(Tuple{typeof(FFTW_jll.__init__)})
precompile(Tuple{typeof(FreeType2_jll.__init__)})
precompile(Tuple{typeof(FriBidi_jll.__init__)})
precompile(Tuple{typeof(GR.__init__)})
precompile(Tuple{typeof(GR.init), Bool})
precompile(Tuple{typeof(GR.js.recv), Base.Cstring, Int32, Base.Cstring})
precompile(Tuple{typeof(GR.js.send), Base.Cstring, Int32})
precompile(Tuple{typeof(JLD2.__init__)})
precompile(Tuple{typeof(JLD2._resolve_type), JLD2.ReadRepresentation{DataType, JLD2.OnDiskRepresentation{(0, 16), Tuple{String, Array{Any, 1}}, Tuple{JLD2.Vlen{String}, JLD2.Vlen{JLD2.RelOffset}}}()}, JLD2.JLDFile{JLD2.MmapIO}, Ptr{Nothing}, JLD2.RelOffset, String, Bool, Array{Any, 1}})
precompile(Tuple{typeof(JLD2._resolve_type_singlemodule), JLD2.ReadRepresentation{DataType, JLD2.OnDiskRepresentation{(0, 16), Tuple{String, Array{Any, 1}}, Tuple{JLD2.Vlen{String}, JLD2.Vlen{JLD2.RelOffset}}}()}, Module, Array{Base.SubString{String}, 1}, String, Bool, Array{Any, 1}})
precompile(Tuple{typeof(JLD2._resolve_type_singlemodule), JLD2.ReadRepresentation{DataType, JLD2.OnDiskRepresentation{(0, 16), Tuple{String, Array{Any, 1}}, Tuple{JLD2.Vlen{String}, JLD2.Vlen{JLD2.RelOffset}}}()}, Module, Array{Base.SubString{String}, 1}, String, Bool, Nothing})
precompile(Tuple{typeof(JLD2.constructrr), JLD2.JLDFile{JLD2.MmapIO}, DataType, JLD2.BasicDatatype, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.constructrr), JLD2.JLDFile{JLD2.MmapIO}, DataType, JLD2.CompoundDatatype, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.constructrr), JLD2.JLDFile{JLD2.MmapIO}, Type{Array{Base.Pair{String, UInt32}, 1}}, JLD2.BasicDatatype, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.constructrr), JLD2.JLDFile{JLD2.MmapIO}, Type{Array{Base.Pair{Symbol, Int64}, 1}}, JLD2.BasicDatatype, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.constructrr), JLD2.JLDFile{JLD2.MmapIO}, Type{Symbol}, JLD2.VariableLengthDatatype{JLD2.FixedPointDatatype}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.fieldnames), Any})
precompile(Tuple{typeof(JLD2.fieldodr), Type{Base.GenericCondition{Base.Threads.SpinLock}}, Bool})
precompile(Tuple{typeof(JLD2.fieldodr), Type{Bool}, Bool})
precompile(Tuple{typeof(JLD2.fieldodr), Type{DataFrames.DataFrame}, Bool})
precompile(Tuple{typeof(JLD2.fieldodr), Type{DataFrames.Index}, Bool})
precompile(Tuple{typeof(JLD2.fieldodr), Type{Int64}, Bool})
precompile(Tuple{typeof(JLD2.fieldodr), Type{UInt32}, Bool})
precompile(Tuple{typeof(JLD2.isgroup), JLD2.JLDFile{JLD2.MmapIO}, JLD2.RelOffset})
precompile(Tuple{typeof(JLD2.jld_finalizer), JLD2.JLDFile{JLD2.MmapIO}})
precompile(Tuple{typeof(JLD2.jldopen), Function, String})
precompile(Tuple{typeof(JLD2.jldopen), String, Bool, Bool, Bool, Type{JLD2.MmapIO}})
precompile(Tuple{typeof(JLD2.jldopen), String})
precompile(Tuple{typeof(JLD2.jltype), JLD2.JLDFile{JLD2.MmapIO}, JLD2.BasicDatatype})
precompile(Tuple{typeof(JLD2.jltype), JLD2.JLDFile{JLD2.MmapIO}, JLD2.FixedPointDatatype})
precompile(Tuple{typeof(JLD2.jltype), JLD2.JLDFile{JLD2.MmapIO}, JLD2.VariableLengthDatatype{JLD2.FixedPointDatatype}})
precompile(Tuple{typeof(JLD2.load_dataset), JLD2.JLDFile{JLD2.MmapIO}, JLD2.RelOffset})
precompile(Tuple{typeof(JLD2.lookup_offset), JLD2.Group{JLD2.JLDFile{JLD2.MmapIO}}, String})
precompile(Tuple{typeof(JLD2.odr), Type{Base.GenericCondition{Base.Threads.SpinLock}}})
precompile(Tuple{typeof(JLD2.odr), Type{Base.InvasiveLinkedList{Task}}})
precompile(Tuple{typeof(JLD2.odr), Type{Base.Pair{String, UInt32}}})
precompile(Tuple{typeof(JLD2.odr), Type{Base.Pair{Symbol, Int64}}})
precompile(Tuple{typeof(JLD2.odr), Type{Base.ReentrantLock}})
precompile(Tuple{typeof(JLD2.odr), Type{Base.Threads.SpinLock}})
precompile(Tuple{typeof(JLD2.odr), Type{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}})
precompile(Tuple{typeof(JLD2.odr), Type{CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalValue{String, UInt32}}}})
precompile(Tuple{typeof(JLD2.odr), Type{CategoricalArrays.CategoricalValue{String, UInt32}}})
precompile(Tuple{typeof(JLD2.odr), Type{DataFrames.DataFrame}})
precompile(Tuple{typeof(JLD2.odr), Type{DataFrames.GroupedDataFrame{DataFrames.DataFrame}}})
precompile(Tuple{typeof(JLD2.odr), Type{DataFrames.Index}})
precompile(Tuple{typeof(JLD2.odr), Type{TypeVar}})
precompile(Tuple{typeof(JLD2.odr), Type{UnionAll}})
precompile(Tuple{typeof(JLD2.odr_sizeof), DataType})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 16), Tuple{String, Array{Any, 1}}, Tuple{JLD2.Vlen{String}, JLD2.Vlen{JLD2.RelOffset}}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 16), Tuple{String, UInt32}, Tuple{JLD2.Vlen{String}, UInt32}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 16), Tuple{Symbol, Int64}, Tuple{JLD2.Vlen{String}, Int64}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 16, 24), Tuple{Symbol, Any, Any}, Tuple{JLD2.Vlen{String}, JLD2.RelOffset, JLD2.RelOffset}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 24, 32, 40, 48, 56, 64, 72, 80), Tuple{DataFrames.DataFrame, Any, Any, Any, Any, Any, Int64, Any, Any}, Tuple{JLD2.OnDiskRepresentation{(0, 8), Tuple{Any, DataFrames.Index}, Tuple{JLD2.RelOffset, JLD2.OnDiskRepresentation{(0, 8), Tuple{Base.Dict{Symbol, Int64}, Any}, Tuple{JLD2.CustomSerialization{Array{T, N} where N where T, JLD2.RelOffset}, JLD2.RelOffset}}()}}(), JLD2.RelOffset, JLD2.RelOffset, JLD2.RelOffset, JLD2.RelOffset, JLD2.RelOffset, Int64, JLD2.RelOffset, JLD2.RelOffset}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 4), Tuple{UInt32, CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalValue{String, UInt32}}}, Tuple{UInt32, JLD2.RelOffset}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 8), Tuple{Any, DataFrames.Index}, Tuple{JLD2.RelOffset, JLD2.OnDiskRepresentation{(0, 8), Tuple{Base.Dict{Symbol, Int64}, Any}, Tuple{JLD2.CustomSerialization{Array{T, N} where N where T, JLD2.RelOffset}, JLD2.RelOffset}}()}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 8), Tuple{Array{AbstractArray{T, 1} where T, 1}, DataFrames.Index}, Tuple{JLD2.RelOffset, JLD2.OnDiskRepresentation{(0, 8), Tuple{Base.Dict{Symbol, Int64}, Array{Symbol, 1}}, Tuple{JLD2.CustomSerialization{Array{Base.Pair{Symbol, Int64}, 1}, JLD2.RelOffset}, JLD2.RelOffset}}()}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 8), Tuple{Array{UInt32, 1}, CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalValue{String, UInt32}}}, Tuple{JLD2.RelOffset, JLD2.RelOffset}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 8), Tuple{Base.Dict{Symbol, Int64}, Any}, Tuple{JLD2.CustomSerialization{Array{T, N} where N where T, JLD2.RelOffset}, JLD2.RelOffset}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 8), Tuple{Base.Dict{Symbol, Int64}, Array{Symbol, 1}}, Tuple{JLD2.CustomSerialization{Array{Base.Pair{Symbol, Int64}, 1}, JLD2.RelOffset}, JLD2.RelOffset}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 8), Tuple{Base.InvasiveLinkedList{Task}, Base.Threads.SpinLock}, Tuple{JLD2.RelOffset, JLD2.RelOffset}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 8), Tuple{TypeVar, Any}, Tuple{JLD2.RelOffset, JLD2.RelOffset}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 8), Tuple{Union{Nothing, Task}, Union{Nothing, Task}}, Tuple{JLD2.RelOffset, JLD2.RelOffset}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 8, 16, 24), Tuple{Any, Base.Dict{String, UInt32}, Any, Bool}, Tuple{JLD2.RelOffset, JLD2.CustomSerialization{Array{T, N} where N where T, JLD2.RelOffset}, JLD2.RelOffset, Bool}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0, 8, 24), Tuple{Union{Nothing, Task}, Base.GenericCondition{Base.Threads.SpinLock}, Int64}, Tuple{JLD2.RelOffset, JLD2.OnDiskRepresentation{(0, 8), Tuple{Base.InvasiveLinkedList{Task}, Base.Threads.SpinLock}, Tuple{JLD2.RelOffset, JLD2.RelOffset}}(), Int64}}})
precompile(Tuple{typeof(JLD2.odr_sizeof), JLD2.OnDiskRepresentation{(0,), Tuple{Int64}, Tuple{Int64}}})
precompile(Tuple{typeof(JLD2.openfile), Type{T} where T, String, Bool, Bool, Bool, Type{T} where T})
precompile(Tuple{typeof(JLD2.rconvert), Type{Base.Dict{String, UInt32}}, Array{Base.Pair{String, UInt32}, 1}})
precompile(Tuple{typeof(JLD2.rconvert), Type{Base.Dict{Symbol, Int64}}, Array{Base.Pair{Symbol, Int64}, 1}})
precompile(Tuple{typeof(JLD2.read_array!), Array{AbstractArray{T, 1} where T, 1}, JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{AbstractArray{T, 1} where T, JLD2.RelOffset}})
precompile(Tuple{typeof(JLD2.read_array!), Array{Base.Pair{String, UInt32}, 1}, JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Base.Pair{String, UInt32}, JLD2.RelOffset}})
precompile(Tuple{typeof(JLD2.read_array!), Array{Base.Pair{Symbol, Int64}, 1}, JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Base.Pair{Symbol, Int64}, JLD2.RelOffset}})
precompile(Tuple{typeof(JLD2.read_array!), Array{CategoricalArrays.CategoricalValue{String, UInt32}, 1}, JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{CategoricalArrays.CategoricalValue{String, UInt32}, JLD2.RelOffset}})
precompile(Tuple{typeof(JLD2.read_array!), Array{Float64, 1}, JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Float64, Float64}})
precompile(Tuple{typeof(JLD2.read_array!), Array{Int64, 1}, JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Int64, Int64}})
precompile(Tuple{typeof(JLD2.read_array!), Array{JLD2.RelOffset, 1}, JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{JLD2.RelOffset, JLD2.RelOffset}})
precompile(Tuple{typeof(JLD2.read_array!), Array{String, 1}, JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{String, JLD2.Vlen{String}}})
precompile(Tuple{typeof(JLD2.read_array!), Array{Symbol, 1}, JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Symbol, JLD2.Vlen{String}}})
precompile(Tuple{typeof(JLD2.read_array!), Array{UInt32, 1}, JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{UInt32, UInt32}})
precompile(Tuple{typeof(JLD2.read_array), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadDataspace, JLD2.ReadRepresentation{AbstractArray{T, 1} where T, JLD2.RelOffset}, Int64, UInt16, JLD2.RelOffset, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_array), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadDataspace, JLD2.ReadRepresentation{Base.Pair{String, UInt32}, JLD2.RelOffset}, Int64, UInt16, JLD2.RelOffset, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_array), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadDataspace, JLD2.ReadRepresentation{Base.Pair{Symbol, Int64}, JLD2.RelOffset}, Int64, UInt16, JLD2.RelOffset, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_array), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadDataspace, JLD2.ReadRepresentation{CategoricalArrays.CategoricalValue{String, UInt32}, JLD2.RelOffset}, Int64, UInt16, JLD2.RelOffset, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Base.InvasiveLinkedList{Task}, JLD2.OnDiskRepresentation{(0, 8), Tuple{Union{Nothing, Task}, Union{Nothing, Task}}, Tuple{JLD2.RelOffset, JLD2.RelOffset}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Base.Pair{String, UInt32}, JLD2.OnDiskRepresentation{(0, 16), Tuple{String, UInt32}, Tuple{JLD2.Vlen{String}, UInt32}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Base.Pair{Symbol, Int64}, JLD2.OnDiskRepresentation{(0, 16), Tuple{Symbol, Int64}, Tuple{JLD2.Vlen{String}, Int64}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Base.ReentrantLock, JLD2.OnDiskRepresentation{(0, 8, 24), Tuple{Union{Nothing, Task}, Base.GenericCondition{Base.Threads.SpinLock}, Int64}, Tuple{JLD2.RelOffset, JLD2.OnDiskRepresentation{(0, 8), Tuple{Base.InvasiveLinkedList{Task}, Base.Threads.SpinLock}, Tuple{JLD2.RelOffset, JLD2.RelOffset}}(), Int64}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Base.Threads.SpinLock, JLD2.OnDiskRepresentation{(0,), Tuple{Int64}, Tuple{Int64}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, JLD2.OnDiskRepresentation{(0, 8), Tuple{Array{UInt32, 1}, CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalValue{String, UInt32}}}, Tuple{JLD2.RelOffset, JLD2.RelOffset}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalValue{String, UInt32}}, JLD2.OnDiskRepresentation{(0, 8, 16, 24), Tuple{Any, Base.Dict{String, UInt32}, Any, Bool}, Tuple{JLD2.RelOffset, JLD2.CustomSerialization{Array{T, N} where N where T, JLD2.RelOffset}, JLD2.RelOffset, Bool}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{CategoricalArrays.CategoricalValue{String, UInt32}, JLD2.OnDiskRepresentation{(0, 4), Tuple{UInt32, CategoricalArrays.CategoricalPool{String, UInt32, CategoricalArrays.CategoricalValue{String, UInt32}}}, Tuple{UInt32, JLD2.RelOffset}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Core.TypeofBottom, nothing}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{DataFrames.DataFrame, JLD2.OnDiskRepresentation{(0, 8), Tuple{Any, DataFrames.Index}, Tuple{JLD2.RelOffset, JLD2.OnDiskRepresentation{(0, 8), Tuple{Base.Dict{Symbol, Int64}, Any}, Tuple{JLD2.CustomSerialization{Array{T, N} where N where T, JLD2.RelOffset}, JLD2.RelOffset}}()}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{DataFrames.GroupedDataFrame{DataFrames.DataFrame}, JLD2.OnDiskRepresentation{(0, 24, 32, 40, 48, 56, 64, 72, 80), Tuple{DataFrames.DataFrame, Any, Any, Any, Any, Any, Int64, Any, Any}, Tuple{JLD2.OnDiskRepresentation{(0, 8), Tuple{Any, DataFrames.Index}, Tuple{JLD2.RelOffset, JLD2.OnDiskRepresentation{(0, 8), Tuple{Base.Dict{Symbol, Int64}, Any}, Tuple{JLD2.CustomSerialization{Array{T, N} where N where T, JLD2.RelOffset}, JLD2.RelOffset}}()}}(), JLD2.RelOffset, JLD2.RelOffset, JLD2.RelOffset, JLD2.RelOffset, JLD2.RelOffset, Int64, JLD2.RelOffset, JLD2.RelOffset}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{DataType, JLD2.OnDiskRepresentation{(0, 16), Tuple{String, Array{Any, 1}}, Tuple{JLD2.Vlen{String}, JLD2.Vlen{JLD2.RelOffset}}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{DataType, JLD2.OnDiskRepresentation{(0, 16), Tuple{String, Array{Any, 1}}, Tuple{JLD2.Vlen{String}, JLD2.Vlen{JLD2.RelOffset}}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Nothing})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Float64, Float64}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Int64, Int64}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Nothing, nothing}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{String, JLD2.Vlen{String}}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{Symbol, JLD2.Vlen{String}}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{TypeVar, JLD2.OnDiskRepresentation{(0, 16, 24), Tuple{Symbol, Any, Any}, Tuple{JLD2.Vlen{String}, JLD2.RelOffset, JLD2.RelOffset}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{UInt32, UInt32}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.read_data), JLD2.JLDFile{JLD2.MmapIO}, JLD2.ReadRepresentation{UnionAll, JLD2.OnDiskRepresentation{(0, 8), Tuple{TypeVar, Any}, Tuple{JLD2.RelOffset, JLD2.RelOffset}}()}, Tuple{JLD2.ReadDataspace, JLD2.RelOffset, Int64, UInt16}, Array{JLD2.ReadAttribute, 1}})
precompile(Tuple{typeof(JLD2.writeas), Type{T} where T})
precompile(Tuple{typeof(JLLWrappers.get_julia_libpaths)})
precompile(Tuple{typeof(LAME_jll.__init__)})
precompile(Tuple{typeof(Libdl.dlopen), String, UInt32})
precompile(Tuple{typeof(Libdl.dlopen), String})
precompile(Tuple{typeof(MacroTools.__init__)})
precompile(Tuple{typeof(Main.cticks), CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}})
precompile(Tuple{typeof(Main.keyInt), String})
precompile(Tuple{typeof(Main.plotMedianAndMax), String})
precompile(Tuple{typeof(Main.plotsForRun), DataFrames.SubDataFrame{DataFrames.DataFrame, DataFrames.Index, Array{Int64, 1}}})
precompile(Tuple{typeof(Markdown.admonition), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.asterisk_bold), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.asterisk_italic), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.blockinterp), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.blockquote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.blocktex), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.footnote), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.github_table), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.hashheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.image), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.interp), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.link), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.list), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.mdexpr), String})
precompile(Tuple{typeof(Markdown.paragraph), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.setextheader), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.tex), Base.GenericIOBuffer{Array{UInt8, 1}}, Markdown.MD})
precompile(Tuple{typeof(Markdown.toexpr), Array{Any, 1}})
precompile(Tuple{typeof(Markdown.toexpr), Expr})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.Header{1}})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.Header{2}})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.Image})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.Italic})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.LaTeX})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.List})
precompile(Tuple{typeof(Markdown.toexpr), Markdown.Table})
precompile(Tuple{typeof(Markdown.toexpr), Symbol})
precompile(Tuple{typeof(Markdown.withstream), Markdown.var"#16#17"{Bool, Base.GenericIOBuffer{Array{UInt8, 1}}, Int64}, Base.GenericIOBuffer{Array{UInt8, 1}}})
precompile(Tuple{typeof(Ogg_jll.__init__)})
precompile(Tuple{typeof(OhMyREPL.__init__)})
precompile(Tuple{typeof(OpenBLAS_jll.__init__)})
precompile(Tuple{typeof(OpenSSL_jll.__init__)})
precompile(Tuple{typeof(OpenSpecFun_jll.__init__)})
precompile(Tuple{typeof(Opus_jll.__init__)})
precompile(Tuple{typeof(Parsers.__init__)})
precompile(Tuple{typeof(Pkg.Artifacts.do_artifact_str), String, Base.Dict{String, Any}, String, Module})
precompile(Tuple{typeof(Pkg.TOML.table2dict), Pkg.TOML.Table})
precompile(Tuple{typeof(Pkg.Types.printpkgstyle), Base.PipeEndpoint, Symbol, String, Bool})
precompile(Tuple{typeof(Pkg.Types.read_field), String, Nothing, Base.Dict{String, Any}, typeof(Base.identity)})
precompile(Tuple{typeof(Pkg.Types.read_field), String, Nothing, Base.Dict{String, Any}, typeof(Pkg.Types.safe_SHA1)})
precompile(Tuple{typeof(Pkg.Types.read_field), String, Nothing, Base.Dict{String, Any}, typeof(Pkg.Types.safe_path)})
precompile(Tuple{typeof(Pkg.Types.read_field), String, Nothing, Base.Dict{String, Any}, typeof(Pkg.Types.safe_uuid)})
precompile(Tuple{typeof(Pkg.Types.read_field), String, Nothing, Base.Dict{String, Any}, typeof(Pkg.Types.safe_version)})
precompile(Tuple{typeof(Pkg.Types.semver_interval), Base.RegexMatch})
precompile(Tuple{typeof(PlotThemes.__init__)})
precompile(Tuple{typeof(PlotUtils.get_color_palette), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(PlotUtils.get_color_palette), Symbol, Int64})
precompile(Tuple{typeof(PlotUtils.get_colorscheme), Symbol})
precompile(Tuple{typeof(PlotUtils.isdark), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGBA{Float64}})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{FixedPointNumbers.Normed{UInt8, 8}}})
precompile(Tuple{typeof(PlotUtils.plot_color), ColorTypes.RGB{Float64}})
precompile(Tuple{typeof(PlotUtils.plot_color), Symbol})
precompile(Tuple{typeof(Plots.__init__)})
precompile(Tuple{typeof(Plots._cycle), Array{Float64, 1}, Int64})
precompile(Tuple{typeof(Plots._cycle), Array{Plots.Subplot{T} where T<:RecipesBase.AbstractBackend, 1}, Int64})
precompile(Tuple{typeof(Plots._cycle), Float64, Int64})
precompile(Tuple{typeof(Plots._cycle), PlotUtils.ColorPalette, Int64})
precompile(Tuple{typeof(Plots._do_plot_show), Plots.Plot{Plots.GRBackend}, Bool})
precompile(Tuple{typeof(Plots._plot!), Plots.Plot{T} where T<:RecipesBase.AbstractBackend, Any, Any})
precompile(Tuple{typeof(Plots._slice_series_args!), Base.Dict{Symbol, Any}, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Plots._slice_series_args!), RecipesPipeline.DefaultsDict, Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Int64})
precompile(Tuple{typeof(Plots._update_plot_args), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(Plots._update_subplot_args), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Int64, Bool})
precompile(Tuple{typeof(Plots._update_subplot_periphery), Plots.Subplot{Plots.GRBackend}, Array{Any, 1}})
precompile(Tuple{typeof(Plots.attr), Plots.EmptyLayout, Symbol, Symbol})
precompile(Tuple{typeof(Plots.build_layout), Plots.GridLayout, Int64})
precompile(Tuple{typeof(Plots.convertLegendValue), Symbol})
precompile(Tuple{typeof(Plots.discrete_value!), Plots.Axis, Float64})
precompile(Tuple{typeof(Plots.expand_extrema!), Plots.Axis, Array{Float64, 1}})
precompile(Tuple{typeof(Plots.get_series_color), Symbol, Plots.Subplot{Plots.GRBackend}, Int64, Symbol})
precompile(Tuple{typeof(Plots.get_subplot), Plots.Plot{Plots.GRBackend}, Plots.Subplot{Plots.GRBackend}})
precompile(Tuple{typeof(Plots.gr)})
precompile(Tuple{typeof(Plots.is_attr_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.is_marker_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.is_seriestype_supported), Plots.GRBackend, Symbol})
precompile(Tuple{typeof(Plots.layout_args), Int64, Tuple{Int64, Int64}})
precompile(Tuple{typeof(Plots.layout_args), Int64})
precompile(Tuple{typeof(Plots.processLineArg), Base.Dict{Symbol, Any}, Int64})
precompile(Tuple{typeof(Plots.processMarkerArg), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(Plots.processMarkerArg), RecipesPipeline.DefaultsDict, Bool})
precompile(Tuple{typeof(Plots.process_axis_arg!), Base.Dict{Symbol, Any}, String, Symbol})
precompile(Tuple{typeof(Plots.reset_axis_defaults_byletter!)})
precompile(Tuple{typeof(Plots.slice_arg), Base.StepRange{Int64, Int64}, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Int64, Int64})
precompile(Tuple{typeof(Plots.slice_arg), String, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Tuple{Base.UnitRange{Int64}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(Plots.slice_arg), Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(Plots.treats_y_as_x), Symbol})
precompile(Tuple{typeof(Plots.wraptuple), Bool})
precompile(Tuple{typeof(Plots.wraptuple), Int64})
precompile(Tuple{typeof(Plots.wraptuple), String})
precompile(Tuple{typeof(Plots.wraptuple), Symbol})
precompile(Tuple{typeof(PlutoUI.with_terminal), Function})
precompile(Tuple{typeof(Random.randexp)})
precompile(Tuple{typeof(Random.shuffle!), Random.MersenneTwister, Array{Symbol, 1}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Any, Any})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, RecipesPipeline.GroupBy, Any, Any})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{Base.Val{:boxplot}}, Any, Any, Any})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.AbstractDict{Symbol, Any}, Type{RecipesPipeline.SliceIt}, Any, Any, Any})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:boxplot}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.apply_recipe), Base.Dict{Symbol, Any}, Type{Base.Val{:scatter}}, Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesBase.is_explicit), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(RecipesPipeline._apply_type_recipe), Any, AbstractArray{var"#s52", N} where N where var"#s52"<:Union{Base.Missing, AbstractFloat, AbstractString, Integer}, Any})
precompile(Tuple{typeof(RecipesPipeline._compute_xyz), Array{Float64, 1}, Array{Float64, 1}, Nothing})
precompile(Tuple{typeof(RecipesPipeline._extract_group_attributes), Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}, Array{Int64, 1}, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline._filter_input_data!), Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._finish_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, RecipesBase.RecipeData})
precompile(Tuple{typeof(RecipesPipeline._process_fillrange), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipe), Any, Any, Any, Any})
precompile(Tuple{typeof(RecipesPipeline._process_plotrecipes!), Any, Any})
precompile(Tuple{typeof(RecipesPipeline._process_ribbon), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipe), Any, Any})
precompile(Tuple{typeof(RecipesPipeline._process_seriesrecipes!), Any, Any})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Array{Float64, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Array{Int64, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Base.SubArray{Float64, 1, Array{Float64, 1}, Tuple{Array{Int64, 1}}, false}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Base.SubArray{Int64, 1, Array{Int64, 1}, Tuple{Array{Int64, 1}}, false}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline._series_data_vector), Nothing, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.add_series!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(RecipesPipeline.filter_data!), Base.Dict{Symbol, Any}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesPipeline.filter_data), Array{Float64, 1}, Array{Int64, 1}})
precompile(Tuple{typeof(RecipesPipeline.is_axis_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_seriestype_supported), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_subplot_attribute), Plots.Plot{Plots.GRBackend}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.is_surface), Symbol})
precompile(Tuple{typeof(RecipesPipeline.plot_setup!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.preprocess_attributes!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict})
precompile(Tuple{typeof(RecipesPipeline.process_sliced_series_attributes!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}})
precompile(Tuple{typeof(RecipesPipeline.process_userrecipe!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.recipe_pipeline!), Any, Any, Any})
precompile(Tuple{typeof(RecipesPipeline.reset_kw!), Base.Dict{Symbol, Any}, Symbol})
precompile(Tuple{typeof(RecipesPipeline.series_defaults), Plots.Plot{Plots.GRBackend}})
precompile(Tuple{typeof(RecipesPipeline.slice_series_attributes!), Plots.Plot{Plots.GRBackend}, Array{Base.Dict{Symbol, Any}, 1}, Base.Dict{Symbol, Any}})
precompile(Tuple{typeof(RecipesPipeline.splittable_attribute), Plots.Plot{Plots.GRBackend}, Symbol, Array{Int64, 1}, Int64})
precompile(Tuple{typeof(RecipesPipeline.splittable_attribute), Plots.Plot{Plots.GRBackend}, Symbol, Tuple{Base.UnitRange{Int64}, Array{String, 1}}, Int64})
precompile(Tuple{typeof(RecipesPipeline.splittable_attribute), Plots.Plot{Plots.GRBackend}, Symbol, Tuple{CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}, CategoricalArrays.CategoricalArray{String, 1, UInt32, String, CategoricalArrays.CategoricalValue{String, UInt32}, Union{}}}, Int64})
precompile(Tuple{typeof(RecipesPipeline.splittable_attribute), Plots.Plot{Plots.GRBackend}, Symbol, Tuple{Int64, Int64}, Int64})
precompile(Tuple{typeof(RecipesPipeline.userrecipe_signature_string), Any, Vararg{Any, N} where N})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Array{RecipesBase.RecipeData, 1}, Symbol, String})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, Base.Dict{Symbol, Any}, Symbol, String})
precompile(Tuple{typeof(RecipesPipeline.warn_on_recipe_aliases!), Plots.Plot{Plots.GRBackend}, RecipesPipeline.DefaultsDict, Symbol, String})
precompile(Tuple{typeof(Requires.__init__)})
precompile(Tuple{typeof(Requires.loadpkg), Base.PkgId})
precompile(Tuple{typeof(Rmath.__init__)})
precompile(Tuple{typeof(Rmath_jll.__init__)})
precompile(Tuple{typeof(SentinelArrays.__init__)})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_length), Type{Tuple{1}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_minimum), Type{Tuple{1}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{0}}})
precompile(Tuple{typeof(StaticArrays.tuple_prod), Type{Tuple{1}}})
precompile(Tuple{typeof(Statistics.quantile), Array{Float64, 1}, Base.StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}})
precompile(Tuple{typeof(StatsPlots.add_sym!), Array{Symbol, 1}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(StatsPlots.add_sym!), Array{Symbol, 1}, Tuple{Symbol, Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(StatsPlots.add_sym!), Array{Symbol, 1}, Tuple{Symbol, Symbol, Symbol}, Tuple{Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(StatsPlots.df_helper), Expr})
precompile(Tuple{typeof(StatsPlots.extract_columns_and_names), DataFrames.DataFrame, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(StatsPlots.notch_width), Float64, Float64, Int64})
precompile(Tuple{typeof(StatsPlots.parse_table_call!), Symbol, Expr, Array{Any, 1}, Array{Symbol, 1}})
precompile(Tuple{typeof(TableOperations.namesubset), Tables.Schema{(:jobType, :nNodes, :nTasks, :rank, :nRows, :inMain, :beforeOpen, :openedFile, :openedDataSet, :determineRanges, :readEnergyDataSet, :readTimeDataSet, :readCaloDataSet, :calibrated, :filledHistograms, :gatheredAllHistograms, :gatheredRankLogs, :readTotal, :totalTime), Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, Int64, Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(TableOperations.namesubset), Tables.Schema{(:jobType, :nNodes, :nTasks, :readEnergyDataSet_median, :readTimeDataSet_median, :readCaloDataSet_median, :readTotal_median, :filledHistograms_median, :readEnergyDataSet_maximum, :readTimeDataSet_maximum, :readCaloDataSet_maximum, :readTotal_maximum, :filledHistograms_maximum, :nProcs, :ideal_filledHistograms_median), Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, CategoricalArrays.CategoricalValue{String, UInt32}, Float64}}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(TableOperations.select), DataFrames.DataFrame, Symbol, Vararg{Symbol, N} where N})
precompile(Tuple{typeof(TableOperations.typesubset), Tables.Schema{(:jobType, :nNodes, :nTasks, :rank, :nRows, :inMain, :beforeOpen, :openedFile, :openedDataSet, :determineRanges, :readEnergyDataSet, :readTimeDataSet, :readCaloDataSet, :calibrated, :filledHistograms, :gatheredAllHistograms, :gatheredRankLogs, :readTotal, :totalTime), Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, Int64, Int64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64}}, Tuple{Symbol, Symbol}})
precompile(Tuple{typeof(TableOperations.typesubset), Tables.Schema{(:jobType, :nNodes, :nTasks, :readEnergyDataSet_median, :readTimeDataSet_median, :readCaloDataSet_median, :readTotal_median, :filledHistograms_median, :readEnergyDataSet_maximum, :readTimeDataSet_maximum, :readCaloDataSet_maximum, :readTotal_maximum, :filledHistograms_maximum, :nProcs, :ideal_filledHistograms_median), Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, Float64, CategoricalArrays.CategoricalValue{String, UInt32}, Float64}}, Tuple{Symbol, Symbol, Symbol}})
precompile(Tuple{typeof(Tables.columntable), TableOperations.Select{DataFrames.DataFrame, true, (:nTasks, :nNodes, :jobType)}})
precompile(Tuple{typeof(Tables.columntable), TableOperations.Select{DataFrames.DataFrame, true, (:nTasks, :readTotal)}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:nTasks, :nNodes, :jobType), Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}, CategoricalArrays.CategoricalValue{String, UInt32}}}, TableOperations.Select{DataFrames.DataFrame, true, (:nTasks, :nNodes, :jobType)}})
precompile(Tuple{typeof(Tables.columntable), Tables.Schema{(:nTasks, :readTotal), Tuple{CategoricalArrays.CategoricalValue{String, UInt32}, Float64}}, TableOperations.Select{DataFrames.DataFrame, true, (:nTasks, :readTotal)}})
precompile(Tuple{typeof(Zlib_jll.__init__)})
precompile(Tuple{typeof(fzf_jll.__init__)})
precompile(Tuple{typeof(libass_jll.__init__)})
precompile(Tuple{typeof(libfdk_aac_jll.__init__)})
precompile(Tuple{typeof(libvorbis_jll.__init__)})
precompile(Tuple{typeof(x264_jll.__init__)})
precompile(Tuple{typeof(x265_jll.__init__)})
